[{"path":[]},{"path":"https://docs.ropensci.org/unifir/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://docs.ropensci.org/unifir/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://docs.ropensci.org/unifir/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://docs.ropensci.org/unifir/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://docs.ropensci.org/unifir/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement mike.mahoney.218@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://docs.ropensci.org/unifir/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://docs.ropensci.org/unifir/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://docs.ropensci.org/unifir/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://docs.ropensci.org/unifir/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://docs.ropensci.org/unifir/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://docs.ropensci.org/unifir/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://docs.ropensci.org/unifir/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to unifir","title":"Contributing to unifir","text":"outlines propose change unifir. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://docs.ropensci.org/unifir/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to unifir","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://docs.ropensci.org/unifir/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to unifir","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://docs.ropensci.org/unifir/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to unifir","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"mikemahoney218/unifir\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://docs.ropensci.org/unifir/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to unifir","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://docs.ropensci.org/unifir/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to unifir","text":"Please note unifir project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/unifir/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 unifir authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/unifir/articles/unifir-asset-guide.html","id":"importing-assets","dir":"Articles","previous_headings":"","what":"Importing Assets","title":"unifir 103 - Using Assets","text":"“asset” Unity really vague category – ’s item ’re including scene, 3D models, code, audio, really type data. get away vagueness, unifir uses slightly pragmatic definition: asset file directory want include Unity project. Unity provides neat format moving collections assets around, allowing compress folders “unitypackage” files can imported projects. Unfortunately, importing packages using Unity’s batchmode API currently work (hasn’t worked number years). rather deal format Unity’s tools moving data around, unifir just copies asset files directly project running scripts action(). ’s function import_asset() comes . function takes two main arguments: script add prop path asset copy (either single file directory, copy recursively). instance, let’s say want import files stored example_asset: can import using import_asset() follows: (information waiver(), check unifir 102). Now run action() script, ’ll copy example_asset directly Assets folder Unity project. Note done entirely R, using file.copy(..., recursive = TRUE), two main implications: first, copy step won’t present C# code anywhere, secondly original file structure preserved example_asset points directory. second point particularly important comes actually using objects scene, rather just exist project. talk , move along :","code":"example_asset <- tempfile() file.create(example_asset) #> [1] TRUE library(unifir) script <- make_script(   project = file.path(tempdir(), \"unifir\"),   unity = waiver() # Makes it so make_script won't error if it can't find Unity )  script <- import_asset(script, example_asset)"},{"path":"https://docs.ropensci.org/unifir/articles/unifir-asset-guide.html","id":"instantiating-prefabs","dir":"Articles","previous_headings":"","what":"Instantiating Prefabs","title":"unifir 103 - Using Assets","text":"lot ways actually bring assets Unity scene things users interact otherwise affected environment. easiest one work , one unifir puts much thought , referred “prefab”. prefab Unity GameObject incorporates external data code, stored single file; information prefabs use ’d recommend official Unity documentation. purposes, ’m going assume ’ve already got prefab created want import scene. first step use import_asset() order bring prefab file (along external files relies ) Unity project. order turn file actual object environment, can use instantiate_prefab() function unifir. function can work just two arguments (though , documented ?instantiate_prefab): script object path prefab want instantiate. Importantly, path relative Unity project root directory, current working directory. Since used import_asset() import “asset” earlier, means asset inside “Assets” directory inside Unity project, can instantiate follows: used import_asset() import directory, file structure directory preserved. means , example_asset directory containing prefab sub_directory/example.prefab, ’d set prefab_path = Assets/example_asset/sub_directory/example.prefab instead. can use arguments instantiate_prefab() customize object , specifying location, rotation, scaling desired.","code":"script <- instantiate_prefab(script,                              prefab_path = file.path(\"Assets\",                                                       basename(example_asset)))"},{"path":"https://docs.ropensci.org/unifir/articles/unifir-asset-guide.html","id":"making-it-easier","dir":"Articles","previous_headings":"","what":"Making it Easier","title":"unifir 103 - Using Assets","text":"prefabs can exist different locations imported assets, single asset directory can contain multiple prefabs, unifir can’t automatically infer prefab ’re trying create instantiate_prefab. means every time want add GameObjects scene, need go two-step process import_asset instantiate_prefab, specifying path asset import path prefab . small set objects, however, unifir makes things bit easier. collection permissively-licensed assets https://github.com/mikemahoney218/unity_assets/ can automatically added scene using helper functions add_default_player add_default_tree. functions handle downloading assets, importing Unity, instantiating prefabs, making easy add player controllers 3D trees scene. objects also permissively licensed – controllers currently MIT-licensed, trees CC-0 1.0 – making free use projects. functions – ’m wrapping (interactive()) prevent downloading files CRAN – take arguments instantiate_prefab let specify position, scale, rotation objects, handle file path trickiness : (permissively-licensed – GPL CC-) assets ’d like share part set, open issue GitHub!","code":"if (interactive()) {   script <- add_default_player(script)   script <- add_default_tree(script, \"tree_1\") }"},{"path":"https://docs.ropensci.org/unifir/articles/unifir-dev-guide.html","id":"waivers","dir":"Articles","previous_headings":"","what":"Waivers","title":"unifir 102 - A developer's guide","text":"’ll discuss moment, unifir lot input checking make sure scripts going execute successfully attempt give users useful feedback Unity’s command line interface often offers. involves making sure scripts props correct values provided parameters, also validating user going working version Unity run commands . course, short list places don’t working version Unity includes “CRAN check machines” “GitHub actions”. result, even simplest function calls fail CRAN – instance, running following throw error: order work around , ’ve borrowed idea (entire function) ggplot2: waiver(). waiver() function way indicate unifir yes, know value normally needs provided, know ’s missing, ’s fine. waiver() return object class waiver: , object doesn’t anything. However, key places, unifir understand waiver() meaning “don’t validate argument”, essential odd props CRAN checks succeed. ’ll using throughout vignette, starting :","code":"library(unifir) make_script(\"example\") waiver() #> list() #> attr(,\"class\") #> [1] \"waiver\""},{"path":"https://docs.ropensci.org/unifir/articles/unifir-dev-guide.html","id":"scripts","dir":"Articles","previous_headings":"","what":"Scripts","title":"unifir 102 - A developer's guide","text":"“script” core object unifir. create script, use make_script: creates R6 object class unifir_script. haven’t worked R6 , recommend checking section Advanced R subject. end day, however, script effectively just glorified list. can check contents using names(): contents – .__encols_env__, clone, initialize – familiar anyone used working R6. Others, file names scene script unifir operating , set make_script() (documented ?make_script) default NULL set: Others, like using, beats, props, little bit involved. ’ll use objects order track props add script; talk , ’s time talk props.","code":"script <- make_script(   project = file.path(tempdir(), \"unifir\"),   unity = waiver() # Don't error if we can't find Unity ) script #> A `unifir_script` object with 0 props #>  #> [1] name type #> <0 rows> (or 0-length row.names) names(script) #>  [1] \".__enclos_env__\"    \"using\"              \"beats\"              #>  [4] \"props\"              \"initialize_project\" \"unity\"              #>  [7] \"scene_exists\"       \"scene_name\"         \"script_name\"        #> [10] \"project\"            \"clone\"              \"initialize\" all(   is.null(script$initialize_project),   is.null(script$scene_name),   is.null(script$script_name) ) #> [1] TRUE"},{"path":"https://docs.ropensci.org/unifir/articles/unifir-dev-guide.html","id":"props","dir":"Articles","previous_headings":"","what":"Props","title":"unifir 102 - A developer's guide","text":"low level, unifir prop just another R6 object, created using function unifir_prop(): Just , can see prop’s contents using names(): fields documented ?unifir_prop. Prop objects actual method unifir uses translate R inputs C# methods. typical prop take input parameters, provided either prop constructor function (moment) set script level, interpolate pre-written C# method, add method pile C# code run sequence produce scene. course, details process depend exactly C# code expected . details sorted prop constructor functions. Rather forcing users use unifir_prop() directly, unifir provides number wrappers around function add specific props script. instance, look code powers new_scene() function: prop takes two parameters – setup mode – top script makes sure exist passed correctly. get internal unifir_prop() call. call passes system.file(\"NewScene.cs\", package = \"unifir\") prop_file argument; print file can see ’s relatively simple C# method: method calls EditorSceneManager.NewScene, part Unity’s scripting API, uses create new scene. code relies “UnityEngine.SceneManagement”, “UnityEditor”, “UnityEditor.SceneManagement” namespaces, ’ve included namespaces prop’s using argument. R code going edit three parts function, marked % signs – method_name, setup, mode arguments replaced equivalent values R. Moving along unifir_prop call, can see method_name set NULL default. method_name unique identifier method prop, hard-coded provided default prop constructors. leave NULL, unifir attempt generate name made 4 random English words fill space. next argument, method_type, internally set NewScene – users control value. method_type meant certain “key” associated specific type prop, props might search depend conflict code; , generally shouldn’t configurable users. see function parameters passed list parameters argument. essential next argument, build() function, constructs C# method. build() function every prop must take three (three) arguments: script, unifir script prop stored , prop, prop built, debug, discussed . build() methods arguments cause errors. result, parameters need construct C# method must stored either prop script object, generally easiest store parameters (checked R6 class). actual build function relatively simple, using glue replace snippets % symbols R equivalents. don’t change default arguments function, means output C# method look something like : last part prop constructor add_prop function, registers prop part script. code incredibly simple, mostly deals creating script$beats table: table relatively simple, storing four variables: idx, order methods executed , name, method_name method, type, method_type method, exec, boolean representing whether method called final C# script:","code":"prop_file <- tempfile() file.create(prop_file) #> [1] TRUE  prop <- unifir_prop(   prop_file = prop_file,   method_name = \"ExampleName\",   method_type = \"ExampleMethod\",   build = function(script, prop, debug) {},   using = \"ExampleDependencies\",   parameters = list() ) prop #> <unifir_prop> #>   Public: #>     build: function (script, prop, debug)  #>     clone: function (deep = FALSE)  #>     initialize: function (prop_file, method_name, method_type, parameters, build,  #>     method_name: ExampleName #>     method_type: ExampleMethod #>     parameters: list #>     prop_file: /tmp/RtmpZ8MQVb/file96c6a17d075 #>     using: ExampleDependencies names(prop) #> [1] \".__enclos_env__\" \"using\"           \"build\"           \"parameters\"      #> [5] \"method_type\"     \"method_name\"     \"prop_file\"       \"clone\"           #> [9] \"initialize\" new_scene #> function (script, setup = c(\"EmptyScene\", \"DefaultGameObjects\"),  #>     mode = c(\"Additive\", \"Single\"), method_name = NULL, exec = TRUE)  #> { #>     setup <- match.arg(setup) #>     mode <- match.arg(mode) #>     prop <- unifir_prop(prop_file = system.file(\"NewScene.cs\",  #>         package = \"unifir\"), method_name = method_name, method_type = \"NewScene\",  #>         parameters = list(setup = setup, mode = mode), build = function(script,  #>             prop, debug) { #>             glue::glue(readChar(prop$prop_file, file.info(prop$prop_file)$size),  #>                 .open = \"%\", .close = \"%\", method_name = prop$method_name,  #>                 setup = setup, mode = mode) #>         }, using = c(\"UnityEngine.SceneManagement\", \"UnityEditor\",  #>             \"UnityEditor.SceneManagement\")) #>     add_prop(script, prop, exec) #> } #> <bytecode: 0x5599c8629348> #> <environment: namespace:unifir> readLines(system.file(\"NewScene.cs\", package = \"unifir\")) #> [1] \"\"                                                                                                #> [2] \"    static void %method_name%() {\"                                                               #> [3] \"        var newScene = EditorSceneManager.NewScene(NewSceneSetup.%setup%, NewSceneMode.%mode%);\" #> [4] \"    }\" script <- new_scene(script)  script$props[[1]]$build(script, script$props[[1]]) #> static void HerthenTrackWhite() { #>     var newScene = EditorSceneManager.NewScene(NewSceneSetup.EmptyScene, NewSceneMode.Additive); #> } add_prop #> function (script, prop, exec = TRUE)  #> { #>     stopifnot(is.logical(exec)) #>     stopifnot(methods::is(script, \"unifir_script\")) #>     idx <- nrow(script$beats) + 1 #>     script$props[[idx]] <- prop #>     script$beats[idx, ]$idx <- idx #>     script$beats[idx, ]$name <- prop$method_name #>     script$beats[idx, ]$type <- prop$method_type #>     script$beats[idx, ]$exec <- exec #>     script$using <- c(script$using, prop$using) #>     script #> } #> <bytecode: 0x5599c843dde0> #> <environment: namespace:unifir> script$beats #>    idx              name     type exec #> NA   1 HerthenTrackWhite NewScene TRUE"},{"path":"https://docs.ropensci.org/unifir/articles/unifir-dev-guide.html","id":"action","dir":"Articles","previous_headings":"","what":"Action","title":"unifir 102 - A developer's guide","text":"props scripts written, ’s showtime! can use action function transform R6 objects actual C# script, execute script Unity. action() quite things. Namely, : Checks Unity project needs created, creates . Fills missing directory file names left NULL. Calls build() method prop, order script$beats$idx, stores constructed C# methods back script. Creates “caller” function call every method script$beats$exec TRUE sequential order. write = TRUE, writes final C# script file. exec = TRUE, executes final C# script Unity. process internal doesn’t matter prop constructors write. long prop idempotent can constructed using build argument, action() shouldn’t create issues. However, cause trouble, action() returns constructed script object props replaced equivalent C# code. makes easy see unifir interpreted build argument; instance, can run example script action() : ’re concerned unifir translated prop code, can find rendered C# inside props: see entire produced C# script, need read actual script file : Notice code matches prop, two additions: first, namespaces provided using now imported top script, second function MainFunc created call prop. executing C# script, unifir execute MainFunc method, turn call prop order ’s listed script$beats.","code":"script <- make_script(   project = file.path(tempdir(), \"unifir\"),   unity = waiver(), # Don't error if we can't find Unity   initialize_project = FALSE, # Don't create the project -- so this runs on CRAN   script_name = \"example_script\" ) script <- new_scene(script) exec_script <- action(   script,   exec = FALSE,   write = TRUE ) exec_script$props #> [1] \"static void ClimbAppleMorningStation() {\\n    var newScene = EditorSceneManager.NewScene(NewSceneSetup.EmptyScene, NewSceneMode.Additive);\\n}\\n\" readLines(   file.path(tempdir(), \"unifir\", \"Assets\", \"Editor\", \"example_script.cs\")   ) #>  [1] \"using UnityEngine.SceneManagement;\"                                                               #>  [2] \"using UnityEditor;\"                                                                               #>  [3] \"using UnityEditor.SceneManagement; \"                                                              #>  [4] \"\"                                                                                                 #>  [5] \"public class example_script {\"                                                                    #>  [6] \"static void ClimbAppleMorningStation() {\"                                                         #>  [7] \"    var newScene = EditorSceneManager.NewScene(NewSceneSetup.EmptyScene, NewSceneMode.Additive);\" #>  [8] \"}\"                                                                                                #>  [9] \"\"                                                                                                 #> [10] \"    static void MainFunc() {\"                                                                     #> [11] \"        ClimbAppleMorningStation();\"                                                              #> [12] \"    }\"                                                                                            #> [13] \"}\""},{"path":"https://docs.ropensci.org/unifir/articles/unifir-dev-guide.html","id":"debug","dir":"Articles","previous_headings":"","what":"Debug","title":"unifir 102 - A developer's guide","text":"One last thing know unifir also built “debug” mode, functions make changes file system. unifir code checks ’s running debug mode using following code: unifir_debugmode set value either environment variable option, unifir avoid writing anything file making changes user’s computer. action() called, provide current state debug prop’s build function. majority props, can safely ignored; prop add C# code final script, action() respect debug behalf. However, prop makes changes file system script actually executed – instance, moving prefabs project directory editing configuration files R – make sure wrap sections prop (!debug)!","code":"function() {   debug <- FALSE   if (Sys.getenv(\"unifir_debugmode\") != \"\" ||       !is.null(options(\"unifir_debugmode\")$unifir_debugmode)) {     debug <- TRUE   }   debug }"},{"path":"https://docs.ropensci.org/unifir/articles/unifir-dev-guide.html","id":"cloning","dir":"Articles","previous_headings":"","what":"Cloning","title":"unifir 102 - A developer's guide","text":"’ve avoided getting deep underlying mechanics R6 , ’s one stumbling block want flag anyone interested developing unifir. vast majority objects R ’s referred “copy--modify” semantics. Say instance object x: assign x new object, y, ’d expect y x value: optimization R’s part, objects value, actually point piece data machine. R actually creates new variable, pointing unique data, actually modify object. result, change value x, don’t turn change value y: R makes copy modify original object, now point different data: true R6 objects, like unifir scripts props. assign prop new object, objects point data, changing one object change . true whether change new object: original one: Instead, R6 objects, need make explicit copy. can using clone() function inside prop object, like : creates actual disconnected object, values original cloned . Now can make changes prop (script) without impacting copies: Make sure , ’re trying multiple different versions prop script, use clone() code!","code":"x <- 2 x #> [1] 2 y <- x y == x #> [1] TRUE x <- 1 y == x #> [1] FALSE other_prop <- prop other_prop$method_name <- \"NewName\" prop$method_name #> [1] \"NewName\" prop$method_name <- \"AnotherName\" other_prop$method_name #> [1] \"AnotherName\" disconnected_prop <- prop$clone() disconnected_prop$method_name <- \"OnlyIGetThisName\" prop$method_name #> [1] \"AnotherName\""},{"path":"https://docs.ropensci.org/unifir/articles/unifir-user-guide.html","id":"why-unifir","dir":"Articles","previous_headings":"","what":"Why unifir?","title":"unifir 101 - A user's guide","text":"Unity video game engine can used produce number immersive experiences, ranging fantastical video game worlds grounded representations real-world places. Typically, Unity project created edited entirely Unity GUI, landscape everything placed intentionally designer. approach works really well attempting build artistic experiences, limits power tool way represent specific scenarios. landscape want represent game engine – real world location outputs simulation program – actually creating representation painstaking manual process. ’s shame, sorts immersive virtual environments can make Unity potential really powerful communication tools. ’s world ’re launching unifir. package aims connect R – one best tools existence wrangling data, real world simulated output – Unity, creating data-driven representations can less painful (nice side effect, reproducible less error-prone well). Hopefully, providing well-structured set tools interacting Unity scripting API, can make easier produce sorts data-driven virtual environments moving forward.","code":""},{"path":"https://docs.ropensci.org/unifir/articles/unifir-user-guide.html","id":"how-unifir","dir":"Articles","previous_headings":"","what":"How unifir?","title":"unifir 101 - A user's guide","text":"answered, ’s time move . get R specifics, ’s probably worthwhile define terms. ’ll talking lot Unity projects, single directories inside code data associated single Unity environment stored. unifir operates single project time; ’s way single pipeline work across two different projects. Similarly, given Unity GUI window operates single project time. next level organization within Unity scene, collection objects code present user’s environment time. unifir can operate multiple scenes within single project problem. sorted, can move unifir . first part working Unity R installing Unity. Unity installed machine, able locate using function find_unity(): function finds path Unity executable system unifir use execute commands. want use different Unity version, can set environment variable unifir_unity_path (option name) path version want use. Unity location set, ready start working unifir. key object unifir package “script” object, unifir uses store commands ’re going execute Unity actually running . can use make_script() function make script, using project argument specify machine want Unity project exist. project directory doesn’t exist, created automatically unless set initialize_project = FALSE. object script now R6 object class unifir_script. , object isn’t super exciting; however, provides basic shell ’re going use keep track things want project. order specify things, can go ahead add “props” “script” object. unifir comes number prop-building functions pre-specified, though hope time packages can add props framework, enabling wider variety functionality currently implemented. instance, terrainr package provides function, make_unity (currently development build) converts files can read raster package terrain surfaces can actually walk across. function wraps number unifir props actually interact Unity engine, also performs spatial data wrangling make sense live specialized package. result, props actually implemented unifir tend little elemental – creating saving scenes, adding lights player controllers, sorts things applicable Unity projects. wanted add character controller scene, instance, can use add_default_player() function modify script: surface, script object doesn’t change . However, look script$props instead, ’d see now three unifir_prop objects script. list unifir keeps track exactly needs make script scene; run props order added script. add_default_player() just one function adds props script; functions unifir add props add lights, 3D models, terrain, script. can see prop functions listed “See Also” prop’s help page (instance, running ?add_default_player). One thing highlight need explicitly save scenes end script. don’t save scene, script executes ’ll find Unity hasn’t made changes project! Always sure add save_scene() call end script: save scene changes, Unity won’t automatically default loading scene open project. want scene load soon open project, can add another prop script via function set_active_scene(): forget , can open scenes inside Unity (File -> Open Scene); unifir always saves scenes “Scenes” folder. Now ’ve added props script, ’s time actually make scene reality. can play script using function action(), create Unity project, turn props C# code, execute code inside project produce scenes! just like , ’ve created Unity project can open look around ! Note scene won’t open default (unless ’ve used set_active_scene() function) – actually see changes ’ve made, make sure load scene located Scenes folder inside project.","code":"library(unifir) find_unity() script <- make_script(   project = file.path(tempdir(), \"unifir\") ) script <- add_default_player(script) script <- save_scene(script) script <- set_active_scene(script) action(script)"},{"path":"https://docs.ropensci.org/unifir/articles/unifir-user-guide.html","id":"a-full-example","dir":"Articles","previous_headings":"","what":"A full example","title":"unifir 101 - A user's guide","text":"now know basics unifir script built, walk actually build one make scene! ’ll walk adding terrain, trees, character scene see looks like rendered. First things first, ’ll need script! Just like , ’ll make script using make_script() function: next, need data terrain want add! can generate random terrain surface using terra package, ’ll load now: ’ll need convert terrain format Unity can read, ’ll load terrainr package well: Importing terrain Unity little bit wonky. First , Unity can’t process standard raster data, rather needs specialized format libraries don’t work (namely, raw bytestreams planar interlacing); reason, ’re going need use terrainr’s transform_elevation() function transform elevation raster proper format. Additionally, Unity doesn’t great way wrangling objects different unit systems – assumes distance “1” 3D model also distance “1” terrain, matter units “1” . ’s common, universal, distance “1” represent distance 1 meter, depending ’re getting assets might need rescale rasters models make everything line appropriately. Lastly, Unity expects terrain tiles (2^x) + 1 unit squares, x number 1 12. reason, ’ll go ahead generate terrain tile ’s 4,097 units across directions, heights centered 10 units elevation. ’ll go ahead write temporary file raster_file, use terrainr convert raster format Unity can import: can go ahead add terrain object scene using function create_terrain(). function bit unwieldy (soon user-friendly wrappers terrainr package), ’ll explain function arguments inline: terrain now set added scene run script! next, can go ahead add trees top scene. ’ll randomly generate 100 X Z coordinates (since Y “” Unity), centered around 0,0 point middle map: Planting trees positions lot easier putting terrain place. unifir provides function, add_default_tree(), download add simple tree models scene want. ’s 12 tree models available time writing, released public domain; ’ll use first one named tree_1. function vectorized, can create multiple trees . ’ll take advantage providing X Z coordinates create 100 separate trees – note wanted, also pass vector tree names use multiple models time. ’ve now got instructions create terrain tree objects! also want add player controller scene, using add_default_player() function created earlier: also add light scene, using add_light() function: props place, now need make sure save changes! also set project loads scene soon opened: , ’re good go! thing left run script, using action() function: Upon opening Unity, see terrain trees fully realized scene:  hit “play” button top window, ’ll drop player character can walk around explore environment. ’s need know start using unifir! ’re looking get even weeds unifir works, make sure check unifir 102 - developer’s guide.","code":"tree_script <- make_script(   project = file.path(tempdir(), \"unifir\", \"random_trees\") ) library(terra) library(terrainr) terrain_size <- 4097 r <- terra::rast(   matrix(rnorm(terrain_size^2, 0, 0.2), terrain_size),   extent = terra::ext(0, terrain_size, 0, terrain_size) )  raster_file <- tempfile(fileext = \".tiff\") terra::writeRaster(r, raster_file)  # I'm quieting the warnings down here, because they can be safely ignored: raster_file <- suppressWarnings(   terrainr::transform_elevation(raster_file,                                  side_length = terrain_size,                                 output_prefix = tempfile()) ) tree_script <- create_terrain(   script = tree_script, # Our unifir_script   heightmap_path = raster_file, # The file path to our elevation raster   # Where should the \"top-left\" corner of the terrain sit?    # Note that Unity uses a left-handed Y-up coordinate system    # where Y is the vertical axis and X and Z define the \"horizontal\" plane.   # We want our terrain to center on the origin of the scene (that is, 0,0,0)   # so we'll set both to -2,050:   x_pos = -2050,   z_pos = -2050,   width = terrain_size, # The total width of the terrain tile (X axis)   length = terrain_size, # The total length of the terrain tile (Z axis)   height = as.numeric(terra::global(r, max)), # Max height of the terrain (Y axis)   # How many pixels are there in the raster along the total width/length?   heightmap_resolution = terrain_size  ) num_trees <- 100 pos <- data.frame(   x = runif(num_trees, -40, 40),   z = runif(num_trees, -40, 40) ) tree_script <- add_default_tree(   tree_script,   \"tree_1\",   x_position = pos$x,   z_position = pos$z,   y_position = 0 # The average height of the terrain ) tree_script <- add_default_player(tree_script) tree_script <- add_light(tree_script) tree_script <- tree_script |>   save_scene(scene_name = \"trees\") |>   set_active_scene(scene_name = \"trees\") action(tree_script)"},{"path":"https://docs.ropensci.org/unifir/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Mahoney. Author, maintainer. Jones. Reviewer.            reviewed package (v. 0.2.0) rOpenSci, see <https://github.com/ropensci/software-review/issues/521> Tan Tran. Reviewer.            Tan reviewed package (v. 0.2.0) rOpenSci, see <https://github.com/ropensci/software-review/issues/521>","code":""},{"path":"https://docs.ropensci.org/unifir/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mahoney M. J., Beier C. M., Ackerman, . C. (2022). unifir: Unifying API Working Unity R. Journal Open Source Software, 7(73), 4388, https://doi.org/10.21105/joss.04388","code":"@Article{,   year = {2022},   publisher = {The Open Journal},   volume = {7},   number = {73},   pages = {4388},   author = {Michael J. Mahoney and Colin M. Beier and Aidan C. Ackerman},   title = {{unifir:} A Unifying {API} for Working with {Unity} in {R}},   journal = {Journal of Open Source Software},   doi = {10.21105/joss.04388},   url = {https://doi.org/10.21105/joss.04388}, }"},{"path":"https://docs.ropensci.org/unifir/index.html","id":"unifir-a-unifying-api-for-working-with-unity-in-r-","dir":"","previous_headings":"","what":"A Unifying API for Calling the Unity 3D Video Game Engine","title":"A Unifying API for Calling the Unity 3D Video Game Engine","text":"unifir unifying API creating managing Unity scenes directly R (without requiring GUI interaction). Users able write natural-feeling R code create “scripts” (C# programs) composed “props” (C# methods) produce scenes inside Unity engine. entirely possible create fleshed-Unity scenes package, unifir primarily designed around easy wrap packages, number packages interacting Unity can share common framework. first function unifir workflows call make_script, creates “script” object. script, can tell unifir things like want save project: can iteratively add props project, building series commands ’ll execute sequence create Unity scene: functions designed pipe mind, letting easily simplify code: props set, ’s time execute script via action function! function create new Unity project (necessary), write “script” object C# file, execute inside Unity project. Open new project UnityHub, open scene created save_scene, ’ll see outputs script right front ! learn , check vignettes ship package – particularly one use unifir make scenes one extend unifir packages. Right now, unifir wraps elements Unity API ’ve found useful work, principally focused around creating GameObjects, lights, player controllers, terrain surfaces. interested pieces API haven’t made unifir yet, please open issue PR!","code":"library(unifir) script <- make_script(project = \"path/to/project\") script <- add_default_player(script, x_position = 10) script <- add_light(script) script <- save_scene(script) script <- make_script(project = \"path/to/project\") |>    add_default_player(x_position = 10) |>    add_light() |>    save_scene() action(script)"},{"path":"https://docs.ropensci.org/unifir/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Unifying API for Calling the Unity 3D Video Game Engine","text":"easiest way install unifir install directly R-Universe: can also install unifir GitHub : Note right now release version unifir; published versions considered “development” versions. unifir API solidifying, yet solid, breaking changes may happen time. unifir can used , ’ll probably want install Unity order actually make Unity projects.","code":"# Enable universe(s) by rOpenSci options(repos = c(   mikemahoney218 = 'https://ropensci-universe.dev',   CRAN = 'https://cloud.r-project.org'))  # Install unifir install.packages('unifir') # install.packages(\"remotes\") remotes::install_github(\"ropensci/unifir\")"},{"path":"https://docs.ropensci.org/unifir/index.html","id":"why-do-this","dir":"","previous_headings":"","what":"Why do this?","title":"A Unifying API for Calling the Unity 3D Video Game Engine","text":"’s lot interest using immersive virtual environments research topics including science communication, landscape planning, environmental economics beyond. incredibly exciting area research, looks likely present new methods participatory planning, data visualization, skill training. However, right now, much research area relies upon closed-source tooling puts hurdles front equitability, accessibility, interoperability field. addition, challenge assessing hand-build environments (say assess participant preferences two scenes) us researchers might accidentally “tilt scales” favor preferred option, putting little effort making scene personally prefer look aesthetically pleasing alternative. unifir first step towards open-source, fully reproducible approach constructing immersive virtual environments. currently targets Unity, proprietary source-available game engine, unifir hopes improve openness interoperability immersive virtual environments encoding decisions involved building scene standard R C# code. partially open system better fully closed one, game engines become feasible options large scale immersive virtual environments, unifir may extended support well.","code":""},{"path":"https://docs.ropensci.org/unifir/index.html","id":"citing-unifir","dir":"","previous_headings":"","what":"Citing unifir","title":"A Unifying API for Calling the Unity 3D Video Game Engine","text":"cite unifir publications please use: Mahoney M. J., Beier C. M., Ackerman, . C. (2022). unifir: Unifying API Working Unity R. Journal Open Source Software, 7(73), 4388, https://doi.org/10.21105/joss.04388 BibTeX entry LaTeX users :","code":"@Article{,     year = {2022},     publisher = {The Open Journal},     volume = {7},     number = {73},     pages = {4388},     author = {Michael J. Mahoney and Colin M. Beier and Aidan C. Ackerman},     title = {{unifir:} A Unifying {API} for Working with {Unity} in {R}},     journal = {Journal of Open Source Software},     doi = {10.21105/joss.04388},     url = {https://doi.org/10.21105/joss.04388},   }"},{"path":"https://docs.ropensci.org/unifir/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"A Unifying API for Calling the Unity 3D Video Game Engine","text":"Please note unifir project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/unifir/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"A Unifying API for Calling the Unity 3D Video Game Engine","text":"materials sponsored affiliated Unity Technologies affiliates. “Unity” trademark registered trademark Unity Technologies affiliates U.S. elsewhere.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/ValidatePath.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a file path exists — validate_path","title":"Validate a file path exists — validate_path","text":"validate_path creates generic C# method takes single argument checks make sure exists. C# code calling method must provide path validate. validate_single_path hard-codes path check C# code. allows specify path check R.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/ValidatePath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a file path exists — validate_path","text":"","code":"validate_path(script, method_name = NULL, exec = FALSE)  validate_single_path(script, path, method_name = NULL, exec = TRUE)"},{"path":"https://docs.ropensci.org/unifir/reference/ValidatePath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a file path exists — validate_path","text":"script unifir_script object, created make_script returned add_prop_* function. method_name internal name use C# method created. randomly generated set. exec Logical: C# method included set executed MainFunc? path file path validate","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/ValidatePath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a file path exists — validate_path","text":"","code":"# First, create a script object. # CRAN doesn't have Unity installed, so pass # a waiver object to skip the Unity-lookup stage: script <- make_script(\"example_script\", unity = waiver())  # Now add props: script <- validate_path(script) # Don't specify the path in R script <- validate_single_path( # Specify the path in R   script,   \"file_that_exists.txt\" )"},{"path":"https://docs.ropensci.org/unifir/reference/action.html","id":null,"dir":"Reference","previous_headings":"","what":"Build and execute a unifir_script — action","title":"Build and execute a unifir_script — action","text":"Build execute unifir_script","code":""},{"path":"https://docs.ropensci.org/unifir/reference/action.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build and execute a unifir_script — action","text":"","code":"action(script, write = TRUE, exec = TRUE, quit = TRUE)"},{"path":"https://docs.ropensci.org/unifir/reference/action.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build and execute a unifir_script — action","text":"script unifir_script object (generated make_script) build execute. write Boolean: Write generated script file? exec Boolean: Execute script inside Unity project? Note write = FALSE, exec TRUE. quit Boolean: Quit Unity execution?","code":""},{"path":"https://docs.ropensci.org/unifir/reference/action.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build and execute a unifir_script — action","text":"exec = FALSE, original unifir_script object passed script. exec = TRUE, unifir_script object props replaced C# generate.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/action.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build and execute a unifir_script — action","text":"","code":"# First, create a script object. # CRAN doesn't have Unity installed, so pass # a waiver object to skip the Unity-lookup stage: script <- make_script(\"example_script\",   unity = waiver() )  # Then add any number of props to it: script <- add_light(script)  # Then call `action` to execute the script! # \\donttest{ if (interactive()) {   action(script) } # }"},{"path":"https://docs.ropensci.org/unifir/reference/add_asset.html","id":null,"dir":"Reference","previous_headings":"","what":"Add assets to a Unity scene — add_default_player","title":"Add assets to a Unity scene — add_default_player","text":"functions add assets available https://github.com/mikemahoney218/unity_assets/ Unity scene.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/add_asset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add assets to a Unity scene — add_default_player","text":"","code":"add_default_player(   script,   controller = c(\"Player\", \"FootstepsPlayer\", \"JetpackPlayer\", \"Third Person\"),   asset_directory = NULL,   lazy = TRUE,   method_name = NULL,   destination_scene = NULL,   x_position = 0,   y_position = 0,   z_position = 0,   x_scale = 1,   y_scale = 1,   z_scale = 1,   x_rotation = 0,   y_rotation = 0,   z_rotation = 0,   exec = TRUE )  add_default_tree(   script,   tree,   asset_directory = NULL,   lazy = TRUE,   method_name = NULL,   destination_scene = NULL,   x_position = 0,   y_position = 0,   z_position = 0,   x_scale = 1,   y_scale = 1,   z_scale = 1,   x_rotation = 0,   y_rotation = 0,   z_rotation = 0,   exec = TRUE )"},{"path":"https://docs.ropensci.org/unifir/reference/add_asset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add assets to a Unity scene — add_default_player","text":"script unifir_script object, created make_script returned add_prop_* function. controller controller use. \"Player\", default, simple first-person controller. \"FootstepsPlayer\" adds footsteps controller, \"JetpackPlayer\" adds \"jetpack\" limited fuel. \"\"Third Person\" lets control small cylinder third person. asset_directory file path directory containing asset, alternatively, default assets saved. Defaults tools::R_user_dir(\"unifir\"). lazy Boolean: TRUE, unifir attempt copy files per run script; FALSE, unifir copy files many times requested, overwriting pre-existing files time. method_name internal name use C# method created. randomly generated set. destination_scene Optionally, scene instantiate prefabs . Ignored NULL, default. x_position, y_position, z_position position GameObject world space. x_scale, y_scale, z_scale scale GameObject (relative parent object). x_rotation, y_rotation, z_rotation rotation GameObject create, Euler angles. exec Logical: C# method included set executed MainFunc? tree tree use. currently 12 generic tree objects available, named \"tree_1\" \"tree_12\". number tree (1-12) can specified instead full name.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/add_asset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add assets to a Unity scene — add_default_player","text":"unifir_script object passed script, props adding assets appended.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/add_asset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add assets to a Unity scene — add_default_player","text":"effect, functions provide thin wrapper across instantiate_prefab import_asset. providing directory asset stored , path prefab file directory copied Unity, files add prefabs specified locations throughout scene. function also download necessary assets handles specifying file paths. add_default_player adds \"player\" controllers Unity scene. add_default_tree adds tree GameObjects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/add_asset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add assets to a Unity scene — add_default_player","text":"","code":"if (interactive()) {   # First, create a script object.   # CRAN doesn't have Unity installed, so pass   # a waiver object to skip the Unity-lookup stage:   script <- make_script(\"example_script\", unity = waiver())    # Now add props:   script <- add_default_player(script)   script <- add_default_tree(script, 1)   script <- save_scene(script) }  # Lastly, execute the script via the `action` function"},{"path":"https://docs.ropensci.org/unifir/reference/add_light.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a light to a Unity scene — add_light","title":"Add a light to a Unity scene — add_light","text":"function creates light objects within Unity scene. function can add one light time -- call function multiple times add one light.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/add_light.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a light to a Unity scene — add_light","text":"","code":"add_light(   script,   light_type = c(\"Directional\", \"Point\", \"Spot\", \"Area\"),   method_name = NULL,   light_name = \"Light\",   x_position = 0,   y_position = 0,   z_position = 0,   x_scale = 1,   y_scale = 1,   z_scale = 1,   x_rotation = 50,   y_rotation = -30,   z_rotation = 0,   exec = TRUE )"},{"path":"https://docs.ropensci.org/unifir/reference/add_light.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a light to a Unity scene — add_light","text":"script unifir_script object, created make_script returned add_prop_* function. light_type One \"Directional\", \"Point\", \"Spot\", \"Area\". See https://docs.unity3d.com/Manual/Lighting.html information. method_name internal name use C# method created. randomly generated set. light_name name assign Light object. x_position, y_position, z_position position GameObject world space. x_scale, y_scale, z_scale scale GameObject (relative parent object). x_rotation, y_rotation, z_rotation rotation GameObject create, Euler angles. exec Logical: C# method included set executed MainFunc?","code":""},{"path":"https://docs.ropensci.org/unifir/reference/add_light.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a light to a Unity scene — add_light","text":"unifir_script object passed script, props adding lights appended.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/add_light.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a light to a Unity scene — add_light","text":"","code":"# First, create a script object. # CRAN doesn't have Unity installed, so pass # a waiver object to skip the Unity-lookup stage: script <- make_script(\"example_script\", unity = waiver())  # Now add props: script <- add_light(script)  # Lastly, execute the script via the `action` function"},{"path":"https://docs.ropensci.org/unifir/reference/add_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a prop to a unifir script — add_prop","title":"Add a prop to a unifir script — add_prop","text":"function exported developers can add props new packages, without needing re-implement prop script classes . expected end users need function.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/add_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a prop to a unifir script — add_prop","text":"","code":"add_prop(script, prop, exec = TRUE)"},{"path":"https://docs.ropensci.org/unifir/reference/add_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a prop to a unifir script — add_prop","text":"script script object (make_script) append prop . prop unifir_prop object (unifir_prop) add script. exec Logical: method created prop called MainFunc method?","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/add_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a prop to a unifir script — add_prop","text":"","code":"script <- make_script(\"example_script\", unity = waiver()) prop <- unifir_prop(   prop_file = waiver(), # Must be a file that exists or waiver()   method_name = NULL, # Auto-generated if NULL or NA   method_type = \"ExampleProp\", # Length-1 character vector   parameters = list(), # Not validated, usually a list   build = function(script, prop, debug) {},   using = character(0) ) script <- add_prop(script, prop)"},{"path":"https://docs.ropensci.org/unifir/reference/add_texture.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Texture2D layer to a terrain tile object — add_texture","title":"Add a Texture2D layer to a terrain tile object — add_texture","text":"function adds helper method, AddTexture, C# script. function typically used add textures heightmaps Unity scene, instance functions like create_terrain. requires arguments provided C# level, almost always called exec = FALSE.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/add_texture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Texture2D layer to a terrain tile object — add_texture","text":"","code":"add_texture(script, method_name = NULL, exec = FALSE)"},{"path":"https://docs.ropensci.org/unifir/reference/add_texture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Texture2D layer to a terrain tile object — add_texture","text":"script unifir_script object, created make_script returned add_prop_* function. method_name internal name use C# method created. randomly generated set. exec Logical: C# method included set executed MainFunc?","code":""},{"path":"https://docs.ropensci.org/unifir/reference/add_texture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Texture2D layer to a terrain tile object — add_texture","text":"unifir_script object passed script, AddTexture method appended.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/add_texture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Texture2D layer to a terrain tile object — add_texture","text":"","code":"# First, create a script object. # CRAN doesn't have Unity installed, so pass # a waiver object to skip the Unity-lookup stage: script <- make_script(\"example_script\",   unity = waiver() )  # Now add props: script <- add_texture(script)  # Lastly, execute the script via the `action` function"},{"path":"https://docs.ropensci.org/unifir/reference/associate_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Associate vector coordinates with a raster surface for Unity import — associate_coordinates","title":"Associate vector coordinates with a raster surface for Unity import — associate_coordinates","text":"Unity uses left-handed coordinate system, effectively \"flipped\" normal way thinking spatial coordinate systems. also can import terrain square tiles side 2^x + 1, x 5 12. result, importing objects Unity scene align terrain surfaces trickier expect. function \"associates\" XY coordinates sf object, likely point data set, raster object.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/associate_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Associate vector coordinates with a raster surface for Unity import — associate_coordinates","text":"","code":"associate_coordinates(object, raster, side_length = 4097)"},{"path":"https://docs.ropensci.org/unifir/reference/associate_coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Associate vector coordinates with a raster surface for Unity import — associate_coordinates","text":"object sf object take coordinates . object reprojected (via sf::st_transform) align raster. raster raster file path raster associate coordinates . Note different rasters produce different coordinate outputs; run function raster plan bringing Unity. file object can read via terra::rast can used. side_length side length terrain tiles, map units, intend bring Unity. Must value equal 2^x + 1, x 5 12. functions unifir family default 4097.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/associate_coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Associate vector coordinates with a raster surface for Unity import — associate_coordinates","text":"data.frame two columns, X Y, representing re-aligned coordinates. object point data (anything object sf::st_coordinates returns single row row ), rows order object (can appended via cbind).","code":""},{"path":"https://docs.ropensci.org/unifir/reference/associate_coordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Associate vector coordinates with a raster surface for Unity import — associate_coordinates","text":"","code":"if (FALSE) { if (!isTRUE(as.logical(Sys.getenv(\"CI\")))) {   simulated_data <- data.frame(     id = seq(1, 100, 1),     lat = runif(100, 44.04905, 44.17609),     lng = runif(100, -74.01188, -73.83493)   )   simulated_data <- sf::st_as_sf(     simulated_data,     coords = c(\"lng\", \"lat\"),     crs = 4326    )   output_files <- terrainr::get_tiles(simulated_data)   temptiff <- tempfile(fileext = \".tif\")   terrainr::merge_rasters(output_files[\"elevation\"][[1]], temptiff)   associate_coordinates(simulated_data, temptiff) } }"},{"path":"https://docs.ropensci.org/unifir/reference/available_assets.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector of assets unifir can download and import — available_assets","title":"Vector of assets unifir can download and import — available_assets","text":"object contains set assets unifir able download import (get_asset import_asset). objects released permissive open-source licenses (currently, either CC-0 1.0 MIT). information assets may found https://github.com/mikemahoney218/unity_assets .","code":""},{"path":"https://docs.ropensci.org/unifir/reference/available_assets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector of assets unifir can download and import — available_assets","text":"","code":"available_assets"},{"path":"https://docs.ropensci.org/unifir/reference/available_assets.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vector of assets unifir can download and import — available_assets","text":"character vector 13 elements, representing asset can imported.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/available_assets.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Vector of assets unifir can download and import — available_assets","text":"https://github.com/mikemahoney218/unity_assets","code":""},{"path":"https://docs.ropensci.org/unifir/reference/check_debug.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if unifir should run in debug mode — check_debug","title":"Check if unifir should run in debug mode — check_debug","text":"running debug mode, unifir write nothing disk.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/check_debug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if unifir should run in debug mode — check_debug","text":"","code":"check_debug()"},{"path":"https://docs.ropensci.org/unifir/reference/create_if_not.html","id":null,"dir":"Reference","previous_headings":"","what":"Create directory if it doesn't exist — create_if_not","title":"Create directory if it doesn't exist — create_if_not","text":"Create directory exist","code":""},{"path":"https://docs.ropensci.org/unifir/reference/create_if_not.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create directory if it doesn't exist — create_if_not","text":"","code":"create_if_not(path, recur = FALSE)"},{"path":"https://docs.ropensci.org/unifir/reference/create_if_not.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create directory if it doesn't exist — create_if_not","text":"path path created recur Boolean: create directories recursively?","code":""},{"path":"https://docs.ropensci.org/unifir/reference/create_terrain.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a terrain tile with optional image overlay — create_terrain","title":"Create a terrain tile with optional image overlay — create_terrain","text":"Create terrain tile optional image overlay","code":""},{"path":"https://docs.ropensci.org/unifir/reference/create_terrain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a terrain tile with optional image overlay — create_terrain","text":"","code":"create_terrain(   script,   method_name = NULL,   heightmap_path,   x_pos,   z_pos,   width,   height,   length,   heightmap_resolution,   texture_path = \"\",   exec = TRUE )"},{"path":"https://docs.ropensci.org/unifir/reference/create_terrain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a terrain tile with optional image overlay — create_terrain","text":"script unifir_script object, created make_script returned add_prop_* function. method_name internal name use C# method created. randomly generated set. heightmap_path file path heightmap import terrain. x_pos, z_pos position corner terrain. width, height, length dimensions terrain tile, linear units. heightmap_resolution resolution heightmap image. texture_path Optional: file path image use terrain overlay. exec Logical: C# method included set executed MainFunc?","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/create_terrain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a terrain tile with optional image overlay — create_terrain","text":"","code":"if (requireNamespace(\"terra\", quietly = TRUE)) {   raster <- tempfile(fileext = \".tiff\")   r <- terra::rast(matrix(rnorm(1000^2, mean = 100, sd = 20), 1000),     extent = terra::ext(0, 1000, 0, 1000)   )   terra::writeRaster(r, raster)    script <- make_script(\"example_script\",     unity = waiver()   )   create_terrain(     script,     heightmap_path = raster,     x_pos = 0,     z_pos = 0,     width = 1000,     height = terra::minmax(r)[[2]],     length = 1000,     heightmap_resolution = 1000   ) } #> A `unifir_script` object with 4 props #>  #>                name          type #> 1    LoadPNGAutoAdd       LoadPNG #> 2 AddTextureAutoAdd    AddTexture #> 3    ReadRawAutoAdd       ReadRaw #> 4  SailAnGovernCall CreateTerrain"},{"path":"https://docs.ropensci.org/unifir/reference/create_unity_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new Unity project. — create_unity_project","title":"Create a new Unity project. — create_unity_project","text":"Create new Unity project.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/create_unity_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new Unity project. — create_unity_project","text":"","code":"create_unity_project(path, quit = TRUE, unity = NULL)"},{"path":"https://docs.ropensci.org/unifir/reference/create_unity_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new Unity project. — create_unity_project","text":"path path create new Unity project . quit Logical: quit Unity creating project? unity path Unity executable system (importantly, UnityHub executable). NULL, checks see environment variable option unifir_unity_path set; , uses path (preferring environment variable option two disagree).","code":""},{"path":"https://docs.ropensci.org/unifir/reference/create_unity_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new Unity project. — create_unity_project","text":"TRUE, invisibly.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/create_unity_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new Unity project. — create_unity_project","text":"","code":"# \\donttest{  if (interactive()) create_unity_project(file.path(tempdir(), \"project\")) # }"},{"path":"https://docs.ropensci.org/unifir/reference/find_unity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Unity executable on a machine. — find_unity","title":"Find the Unity executable on a machine. — find_unity","text":"path Unity provided function, function invoked attempt find . , goes following steps: Attempt load \"unifir_unity_path\" environment variable. Attempt load \"unifir_unity_path\" option. Assuming neither points actual file, function check default installation paths Unity user's operating system. found, function error.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/find_unity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Unity executable on a machine. — find_unity","text":"","code":"find_unity(unity = NULL, check_path = TRUE)"},{"path":"https://docs.ropensci.org/unifir/reference/find_unity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Unity executable on a machine. — find_unity","text":"unity Character: provided, function quote provided string (necessary) return . check_path Logical: TRUE, function check Unity executable provided argument, environment variable, option exists. , function attempt find one, error found. FALSE, function never error.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/find_unity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Unity executable on a machine. — find_unity","text":"path Unity executable user's machine, length-1 character vector.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/find_unity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the Unity executable on a machine. — find_unity","text":"","code":"if (interactive()) {   try(find_unity()) }"},{"path":"https://docs.ropensci.org/unifir/reference/get_asset.html","id":null,"dir":"Reference","previous_headings":"","what":"Download prefabs for Unity — get_asset","title":"Download prefabs for Unity — get_asset","text":"simple helper function downloading assets stored https://github.com/mikemahoney218/unity_assets .","code":""},{"path":"https://docs.ropensci.org/unifir/reference/get_asset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download prefabs for Unity — get_asset","text":"","code":"get_asset(asset, directory = NULL)"},{"path":"https://docs.ropensci.org/unifir/reference/get_asset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download prefabs for Unity — get_asset","text":"asset asset download. Available asset names provided available_assets. directory Optionally, directory extract downloaded models . NULL, default, saves tools::R_user_dir(\"unifir\").","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/get_asset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download prefabs for Unity — get_asset","text":"","code":"if (interactive()) {   get_asset(asset = \"tree_1\", directory = tempdir()) }"},{"path":"https://docs.ropensci.org/unifir/reference/import_asset.html","id":null,"dir":"Reference","previous_headings":"","what":"Import assets into Unity. — import_asset","title":"Import assets into Unity. — import_asset","text":"Import assets Unity.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/import_asset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import assets into Unity. — import_asset","text":"","code":"import_asset(script, asset_path, lazy = TRUE)"},{"path":"https://docs.ropensci.org/unifir/reference/import_asset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import assets into Unity. — import_asset","text":"script unifir_script object, created make_script returned add_prop_* function. asset_path file path asset import. directory, entire directory recursively copied. Note function method_name argument: asset_path used method name. function currently vectorized; call separately asset need import. lazy Boolean: TRUE, unifir attempt copy files per run script; FALSE, unifir copy files many times requested, overwriting pre-existing files time.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/import_asset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import assets into Unity. — import_asset","text":"script new prop.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/import_asset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import assets into Unity. — import_asset","text":"","code":"# First, create a script object. # CRAN doesn't have Unity installed, so pass # a waiver object to skip the Unity-lookup stage: script <- make_script(\"example_script\",   unity = waiver() )  # CRAN also doesn't have any props to install, # so we'll make a fake prop location: prop_directory <- file.path(tempdir(), \"props\") dir.create(prop_directory)  # Now add props: script <- import_asset(script, prop_directory)  # Lastly, execute the script via the `action` function"},{"path":"https://docs.ropensci.org/unifir/reference/instantiate_prefab.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a prefab to a Unity scene — instantiate_prefab","title":"Add a prefab to a Unity scene — instantiate_prefab","text":"function creates objects (specifically, prefabs) within Unity scene. function vectorized functions prefab_path z_rotation; add multiple objects, simply provide vectors argument. Note arguments automatically recycled length; may produce undesired results. function capable altering single scene -- call function multiple times need manipulate multiple scenes.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/instantiate_prefab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a prefab to a Unity scene — instantiate_prefab","text":"","code":"instantiate_prefab(   script,   method_name = NULL,   destination_scene = NULL,   prefab_path,   x_position = 0,   y_position = 0,   z_position = 0,   x_scale = 1,   y_scale = 1,   z_scale = 1,   x_rotation = 0,   y_rotation = 0,   z_rotation = 0,   exec = TRUE )"},{"path":"https://docs.ropensci.org/unifir/reference/instantiate_prefab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a prefab to a Unity scene — instantiate_prefab","text":"script unifir_script object, created make_script returned add_prop_* function. method_name internal name use C# method created. randomly generated set. destination_scene Optionally, scene instantiate prefabs . Ignored NULL, default. prefab_path File path prefab instantiated. relative Unity project root directory, likely begins \"Assets\". Alternatively, one elements x_position, y_position, z_position position GameObject world space. x_scale, y_scale, z_scale scale GameObject (relative parent object). x_rotation, y_rotation, z_rotation rotation GameObject create, Euler angles. exec Logical: C# method included set executed MainFunc?","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/instantiate_prefab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a prefab to a Unity scene — instantiate_prefab","text":"","code":"# First, create a script object. # CRAN doesn't have Unity installed, so pass # a waiver object to skip the Unity-lookup stage: script <- make_script(\"example_script\", unity = waiver())  # Now add props: script <- instantiate_prefab(script, prefab_path = \"Assets/some.prefab\")  # Lastly, execute the script via the `action` function"},{"path":"https://docs.ropensci.org/unifir/reference/load_png.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Texture2D from a PNG file — load_png","title":"Create a Texture2D from a PNG file — load_png","text":"function adds helper method, LoadPNG, C# script. function typically used C# methods bring textures Unity scene, instance functions like create_terrain. requires arguments provided C# level, almost always called exec = FALSE.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/load_png.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Texture2D from a PNG file — load_png","text":"","code":"load_png(script, method_name = NULL, exec = FALSE)"},{"path":"https://docs.ropensci.org/unifir/reference/load_png.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Texture2D from a PNG file — load_png","text":"script unifir_script object, created make_script returned add_prop_* function. method_name internal name use C# method created. randomly generated set. exec Logical: C# method included set executed MainFunc?","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/load_png.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Texture2D from a PNG file — load_png","text":"","code":"# First, create a script object. # CRAN doesn't have Unity installed, so pass # a waiver object to skip the Unity-lookup stage: script <- make_script(\"example_script\", unity = waiver())  # Then add any number of props to it: script <- load_png(script)  # Then call `action` to execute the script!"},{"path":"https://docs.ropensci.org/unifir/reference/load_scene.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a scene in a Unity project. — load_scene","title":"Load a scene in a Unity project. — load_scene","text":"Load scene Unity project.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/load_scene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a scene in a Unity project. — load_scene","text":"","code":"load_scene(script, scene_name, method_name = NULL, exec = TRUE)"},{"path":"https://docs.ropensci.org/unifir/reference/load_scene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a scene in a Unity project. — load_scene","text":"script unifir_script object, created make_script returned add_prop_* function. scene_name name scene load. method_name internal name use C# method created. randomly generated set. exec Logical: C# method included set executed MainFunc?","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/load_scene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a scene in a Unity project. — load_scene","text":"","code":"# First, create a script object. # CRAN doesn't have Unity installed, so pass # a waiver object to skip the Unity-lookup stage: script <- make_script(\"example_script\", unity = waiver())  # Now add props: script <- load_scene(script, scene_name = \"some_scene\")  # Lastly, execute the script via the `action` function"},{"path":"https://docs.ropensci.org/unifir/reference/make_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an empty unifir_script object. — make_script","title":"Create an empty unifir_script object. — make_script","text":"unifir relies upon \"script\" objects, collect \"prop\" objects (C# methods) may executed within Unity project via action function.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/make_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an empty unifir_script object. — make_script","text":"","code":"make_script(   project,   script_name = NULL,   scene_name = NULL,   unity = find_unity(),   initialize_project = NULL )"},{"path":"https://docs.ropensci.org/unifir/reference/make_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an empty unifir_script object. — make_script","text":"project directory path Unity project. script_name file name save script . folder location file extensions added automatically. scene_name default scene operate within. function requires scene name one provided, field used. unity location Unity executable create projects . initialize_project TRUE, call create_unity_project create Unity project project. FALSE, create new project. NULL, create new project project exist.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/make_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an empty unifir_script object. — make_script","text":"unifir_script object.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/make_script.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an empty unifir_script object. — make_script","text":"","code":"# Create an empty script file # In practice, you'll want to set `project` to the project path to create # and `unity` to `NULL` (the default) make_script(project = waiver(), unity = waiver()) #> A `unifir_script` object with 0 props #>  #> [1] name type #> <0 rows> (or 0-length row.names)"},{"path":"https://docs.ropensci.org/unifir/reference/new_scene.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new scene in a Unity project. — new_scene","title":"Create a new scene in a Unity project. — new_scene","text":"Create new scene Unity project.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/new_scene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new scene in a Unity project. — new_scene","text":"","code":"new_scene(   script,   setup = c(\"EmptyScene\", \"DefaultGameObjects\"),   mode = c(\"Additive\", \"Single\"),   method_name = NULL,   exec = TRUE )"},{"path":"https://docs.ropensci.org/unifir/reference/new_scene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new scene in a Unity project. — new_scene","text":"script unifir_script object, created make_script returned add_prop_* function. setup One \"EmptyScene\" (\"game objects added new Scene.\") \"DefaultGameObjects\" (\"Adds default game objects new Scene (light camera).\") mode One \"Additive\" (\"newly created Scene added current open Scenes.\") \"Single\" (\"current open Scenes closed newly created Scene opened.\") method_name internal name use C# method created. randomly generated set. exec Logical: C# method included set executed MainFunc?","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/new_scene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new scene in a Unity project. — new_scene","text":"","code":"# First, create a script object. # CRAN doesn't have Unity installed, so pass # a waiver object to skip the Unity-lookup stage: script <- make_script(\"example_script\",   unity = waiver() )  # Now add props: script <- new_scene(script)  # Lastly, execute the script via the `action` function"},{"path":"https://docs.ropensci.org/unifir/reference/read_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a RAW file in as a float array — read_raw","title":"Read a RAW file in as a float array — read_raw","text":"function adds helper method, ReadRaw, C# script. function typically used bring heightmaps Unity scene, instance functions like create_terrain. requires arguments provided C# level, almost always called exec = FALSE.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/read_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a RAW file in as a float array — read_raw","text":"","code":"read_raw(script, method_name = NULL, exec = FALSE)"},{"path":"https://docs.ropensci.org/unifir/reference/read_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a RAW file in as a float array — read_raw","text":"script unifir_script object, created make_script returned add_prop_* function. method_name internal name use C# method created. randomly generated set. exec Logical: C# method included set executed MainFunc?","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/read_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a RAW file in as a float array — read_raw","text":"","code":"# First, create a script object. # CRAN doesn't have Unity installed, so pass # a waiver object to skip the Unity-lookup stage: script <- make_script(\"example_script\", unity = waiver())  # Now add props: script <- read_raw(script)  # Lastly, execute the script via the `action` function"},{"path":"https://docs.ropensci.org/unifir/reference/save_scene.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a scene in a Unity project. — save_scene","title":"Save a scene in a Unity project. — save_scene","text":"Save scene Unity project.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/save_scene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a scene in a Unity project. — save_scene","text":"","code":"save_scene(script, scene_name = NULL, method_name = NULL, exec = TRUE)"},{"path":"https://docs.ropensci.org/unifir/reference/save_scene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a scene in a Unity project. — save_scene","text":"script unifir_script object, created make_script returned add_prop_* function. scene_name name save scene . method_name internal name use C# method created. randomly generated set. exec Logical: C# method included set executed MainFunc?","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/save_scene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a scene in a Unity project. — save_scene","text":"","code":"# First, create a script object. # CRAN doesn't have Unity installed, so pass # a waiver object to skip the Unity-lookup stage: script <- make_script(\"example_script\",   unity = waiver() )  # Now add props: script <- save_scene(script, scene_name = \"some_scene\")  # Lastly, execute the script via the `action` function"},{"path":"https://docs.ropensci.org/unifir/reference/set_active_scene.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a single scene to active. — set_active_scene","title":"Set a single scene to active. — set_active_scene","text":"Set single scene active.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/set_active_scene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a single scene to active. — set_active_scene","text":"","code":"set_active_scene(script, scene_name = NULL, method_name = NULL, exec = FALSE)"},{"path":"https://docs.ropensci.org/unifir/reference/set_active_scene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a single scene to active. — set_active_scene","text":"script unifir_script object, created make_script returned add_prop_* function. scene_name name scene set active scene. method_name internal name use C# method created. randomly generated set. exec Logical: C# method included set executed MainFunc?","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/set_active_scene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a single scene to active. — set_active_scene","text":"","code":"# First, create a script object. # CRAN doesn't have Unity installed, so pass # a waiver object to skip the Unity-lookup stage: script <- make_script(\"example_script\",   unity = waiver() )  # Now add props: script <- set_active_scene(script, scene_name = \"some_scene\")  # Lastly, execute the script via the `action` function"},{"path":"https://docs.ropensci.org/unifir/reference/set_script_defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill in plot holes in a script — set_script_defaults","title":"Fill in plot holes in a script — set_script_defaults","text":"Fill plot holes script","code":""},{"path":"https://docs.ropensci.org/unifir/reference/set_script_defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill in plot holes in a script — set_script_defaults","text":"","code":"set_script_defaults(script, debug)"},{"path":"https://docs.ropensci.org/unifir/reference/set_script_defaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill in plot holes in a script — set_script_defaults","text":"script unifir_script fill elements debug Boolean: run debug mode?","code":""},{"path":"https://docs.ropensci.org/unifir/reference/unifir-package.html","id":null,"dir":"Reference","previous_headings":"","what":"unifir: A Unifying API for Calling the 'Unity' '3D' Video Game Engine — unifir-package","title":"unifir: A Unifying API for Calling the 'Unity' '3D' Video Game Engine — unifir-package","text":"Functions creation manipulation scenes objects within 'Unity' '3D' video game engine (https://unity.com/). Specific focuses include creation import terrain data 'GameObjects' well scene management.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/unifir-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"unifir: A Unifying API for Calling the 'Unity' '3D' Video Game Engine — unifir-package","text":"Maintainer: Michael Mahoney mike.mahoney.218@gmail.com (ORCID) contributors: Jones (reviewed package (v. 0.2.0) rOpenSci, see <https://github.com/ropensci/software-review/issues/521>) [reviewer] Tan Tran (Tan reviewed package (v. 0.2.0) rOpenSci, see <https://github.com/ropensci/software-review/issues/521>) [reviewer]","code":""},{"path":"https://docs.ropensci.org/unifir/reference/unifir_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"The class for unifir prop objects — unifir_prop","title":"The class for unifir prop objects — unifir_prop","text":"function exported developers can add props new packages, without needing re-implement prop script classes . expected end users need function.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/unifir_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The class for unifir prop objects — unifir_prop","text":"","code":"unifir_prop(prop_file, method_name, method_type, parameters, build, using)"},{"path":"https://docs.ropensci.org/unifir/reference/unifir_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The class for unifir prop objects — unifir_prop","text":"prop_file system location C# template file method_name name method, C# code method_type type method (usually matches file name); scripts can multiple versions method, different method_name values, sharing method_type. parameters Method-specific parameters, typically used build stage. build function takes three arguments, script, prop, debug, uses construct C# method. using character vector imports required method.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/unifir_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The class for unifir prop objects — unifir_prop","text":"R6 object class unifir_prop","code":""},{"path":"https://docs.ropensci.org/unifir/reference/unifir_prop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The class for unifir prop objects — unifir_prop","text":"function check argument correctness. specific, performs following checks: prop_file must either waiver object (created waiver) file path length 1 pointing file exists method_name automatically generated existing. exists, must character vector length 1 method_type must character vector length 1 build must function arguments script, prop, debug (order, arguments). arguments needed build function passed prop parameters. using must character vector (length, including 0) prop needs data arguments beyond , store list parameters, entirely unchecked.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/unifir_prop.html","id":"the-debug-argument","dir":"Reference","previous_headings":"","what":"The debug argument","title":"The class for unifir prop objects — unifir_prop","text":"Sys.getenv(unifir_debugmode) returns anything \"\", action runs \"debug mode\". addition setting exec write FALSE action, mode also attempts disable prop functionality make changes user's disk -- files directories altered. mode, action pass debug = TRUE argument prop; prop respect debug mode avoid making changes.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/unifir_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The class for unifir prop objects — unifir_prop","text":"","code":"unifir_prop(   prop_file = waiver(), # Must be a file that exists or waiver()   method_name = NULL, # Auto-generated if NULL or NA   method_type = \"ExampleProp\", # Length-1 character vector   parameters = list(), # Not validated, usually a list   build = function(script, prop, debug) {},   using = character(0) ) #> <unifir_prop> #>   Public: #>     build: function (script, prop, debug)  #>     clone: function (deep = FALSE)  #>     initialize: function (prop_file, method_name, method_type, parameters, build,  #>     method_name: SpreadOhFamousBird #>     method_type: ExampleProp #>     parameters: list #>     prop_file: waiver #>     using:"},{"path":"https://docs.ropensci.org/unifir/reference/unity_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the version of the Unity Editor in use. — unity_version","title":"Print the version of the Unity Editor in use. — unity_version","text":"Print version Unity Editor use.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/unity_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the version of the Unity Editor in use. — unity_version","text":"","code":"unity_version(unity = NULL)"},{"path":"https://docs.ropensci.org/unifir/reference/unity_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the version of the Unity Editor in use. — unity_version","text":"unity path Unity executable system (importantly, UnityHub executable). NULL, checks see environment variable option unifir_unity_path set; , uses path (preferring environment variable option two disagree).","code":""},{"path":"https://docs.ropensci.org/unifir/reference/unity_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the version of the Unity Editor in use. — unity_version","text":"character vector length 1 containing version Unity use.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/unity_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the version of the Unity Editor in use. — unity_version","text":"","code":"try(   unity_version() ) #> Error in find_unity() : Couldn't find Unity executable at provided path.  #> Please make sure the path provided to 'unity' is correct."},{"path":"https://docs.ropensci.org/unifir/reference/waiver.html","id":null,"dir":"Reference","previous_headings":"","what":"A waiver object. — waiver","title":"A waiver object. — waiver","text":"function borrowed ggplot2. creates \"flag\" object indicating value intentionally left blank (filled something else). Often, function argument missing NULL result error, passing waiver() cause function look elsewhere script acceptable value.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/waiver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A waiver object. — waiver","text":"","code":"waiver()"},{"path":"https://docs.ropensci.org/unifir/reference/waiver.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A waiver object. — waiver","text":"empty list class waiver.","code":""},{"path":"https://docs.ropensci.org/unifir/reference/waiver.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A waiver object. — waiver","text":"H. Wickham. ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York, 2016.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/reference/waiver.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A waiver object. — waiver","text":"","code":"waiver() #> list() #> attr(,\"class\") #> [1] \"waiver\""},{"path":[]},{"path":"https://docs.ropensci.org/unifir/news/index.html","id":"unifir-024","dir":"Changelog","previous_headings":"","what":"unifir 0.2.4","title":"unifir 0.2.4","text":"CRAN release: 2024-02-01 New print.unifir_script method hides R6 internals backing package, makes dissertation chapter render nicer. Removed trailing commas calls glue() fix errors R devel (#17)","code":""},{"path":"https://docs.ropensci.org/unifir/news/index.html","id":"unifir-023","dir":"Changelog","previous_headings":"","what":"unifir 0.2.3","title":"unifir 0.2.3","text":"CRAN release: 2022-12-02 Fixed bug spaces path Unity cause unity_version() create_project() fail. Fixed InstantiatePrefab C# requirements now include UnityEditor. Fixed test new sf terra versions. associate_coordinates() now reproject objects coordinate reference systems. Added citation information.","code":""},{"path":"https://docs.ropensci.org/unifir/news/index.html","id":"unifir-022","dir":"Changelog","previous_headings":"","what":"unifir 0.2.2","title":"unifir 0.2.2","text":"CRAN release: 2022-08-11 Redocumented keep package CRAN. action() now much modular, outsourcing handful new internal functions","code":""},{"path":"https://docs.ropensci.org/unifir/news/index.html","id":"unifir-021","dir":"Changelog","previous_headings":"","what":"unifir 0.2.1","title":"unifir 0.2.1","text":"CRAN release: 2022-05-13 intentionally small patch release, intended fix three problems: Provides appropriate citation via citation(\"unifir\") README Addresses failing test M1 macs Uses match.arg() appropriate places","code":""},{"path":"https://docs.ropensci.org/unifir/news/index.html","id":"unifir-020","dir":"Changelog","previous_headings":"","what":"unifir 0.2.0","title":"unifir 0.2.0","text":"CRAN release: 2022-05-04 find_unity() now doesn’t escape Unity path (string returned actual path Unity engine, quoted version). Accordingly, action() now wraps unity shQuote(). (#4) add_default_tree() now imports trees standing upright default. manually set x_rotation 0, however, trees import sideways ever. (#7) Examples now tested (work) (#8 1d5b1f3) create_terrain() handles non-local terrain files (#6) unifir_prop() now checks make sure script exists unifir_script. Previously errored baffling message long vectors. Vignettes fleshed , full example added user-facing vignette. (#7) Return values better documented (#5) Functions consistently linked documentation formatting now consistent (#5) find_unity() doesn’t now weird break documentation sections README now links vignettes explains anyone want deal Unity first place","code":""},{"path":"https://docs.ropensci.org/unifir/news/index.html","id":"unifir-010","dir":"Changelog","previous_headings":"","what":"unifir 0.1.0","title":"unifir 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
